pipeline {
    agent {
        node {label 'python'}
    }
    environment {
        APPLICATION_NAME = 'python-nginx'
        GIT_REPO="https://github.com/PriyaVP-crypto/openshift-python-nginx-pipeline.git"
        GIT_BRANCH="master"
        STAGE_TAG = "promoteToQA"
        DEV_PROJECT = "dev"
        STAGE_PROJECT = "stage"
        TEMPLATE_NAME = "python-nginx"
        ARTIFACT_FOLDER = "target"
        REGISTRY = "priyavp/payment-python"
        REGCREDENTIAL = 'dockerhub'
        DOCKERIMAGE= ''
        PORT = 8081;
    }
    stages {
        stage('Get Latest Code') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
            }
        }
        stage ("Install Dependencies") {
            steps {
                sh """
                pip install virtualenv
                virtualenv foo
                source foo/Scripts/activate
                pip install -r app/requirements.pip
                deactivate
                """
            }
        }
        stage('Run Tests') {
            steps {
                sh '''
                echo "Tests success"
                '''
                
            }
        }
        
        stage('Store Artifact'){
            steps{
                script{
                    def safeBuildName  = "${APPLICATION_NAME}_${BUILD_NUMBER}",
                        artifactFolder = "${ARTIFACT_FOLDER}",
                        fullFileName   = "${safeBuildName}.tar.gz",
                        applicationZip = "${artifactFolder}/${fullFileName}"
                        applicationDir = ["app",
                                            "config",
                                            "Dockerfile",
                                            ].join(" ");
                    def needTargetPath = !fileExists("${artifactFolder}")
                    if (needTargetPath) {
                        sh "mkdir ${artifactFolder}"
                    }
                    sh "tar -czvf ${applicationZip} ${applicationDir}"
                    archiveArtifacts artifacts: "${applicationZip}", excludes: null, onlyIfSuccessful: true
                }
            }
        }
         stage('Create Image Builder') {
            when {
                expression {
                   
                        echo "hello"
                        openshift.withCluster('myCluster') {
                            echo "inside"
                            openshift.withProject(DEV_PROJECT) {
                                return !openshift.selector("bc", "${TEMPLATE_NAME}").exists();
                            }
                        
                }
            }
        }
        steps {
            script {
                openshift.withCluster('myCluster') {
                    openshift.withProject(DEV_PROJECT) {
                        openshift.newBuild("--name=${TEMPLATE_NAME}", "--docker-image=docker.io/nginx:mainline-alpine", "--binary=true")
                        }
                    }
                }
            }
        }
       
        
        
        

         
        }
    }  
    
